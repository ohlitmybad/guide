name: Translate to French

on:
  push:
    branches: [ main, master ]
    paths:
      - 'locales/xx.json'

jobs:
  translate-to-french:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout guide repo
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 2  # Fetch the current and previous commit

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai

    - name: Translate changes in xx.json to French
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      id: translate
      run: |
        cat > translate_changes.py << 'EOL'
        import json
        import os
        import time
        import sys
        import subprocess
        from openai import OpenAI

        # Function to log with timestamps
        def log_with_time(message):
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{timestamp}] {message}")
            sys.stdout.flush()

        start_time = time.time()
        log_with_time("Starting translation process")

        # Get previous version of xx.json
        log_with_time("Getting previous version of xx.json")
        try:
            previous_content = subprocess.check_output(
                ["git", "show", "HEAD~1:locales/xx.json"], 
                text=True
            )
            previous_xx = json.loads(previous_content)
        except subprocess.CalledProcessError:
            log_with_time("Could not find previous version, will create new fr.json from scratch")
            previous_xx = {"page-content": ""}

        # Load current xx.json
        log_with_time("Loading current xx.json file")
        with open('locales/xx.json', 'r', encoding='utf-8') as file:
            current_xx = json.load(file)

        # Load existing fr.json if it exists
        fr_data = {"common": {"nav": {"players": "Joueurs","pro": "Pro","teams": "Équipes"}},
                "meta": {"title": "DataMB | Guide","description": "Explication des outils, des statistiques et de la méthodologie utilisés par DataMB"},
                "search": {"placeholder": "Cherchez une équipe ou joueur..."},
                "page-content": ""}

        if os.path.exists('locales/fr.json'):
            log_with_time("Loading existing fr.json file")
            with open('locales/fr.json', 'r', encoding='utf-8') as file:
                fr_data = json.load(file)

        # Initialize OpenAI API
        log_with_time("Initializing OpenAI API client")
        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

        # Simple approach: if this is the first run or there's no fr.json, translate everything
        if not os.path.exists('locales/fr.json') or not fr_data.get('page-content'):
            log_with_time("No existing fr.json found, translating entire content")
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Translate the given HTML content from English to French. Keep all HTML tags and structure intact. Use widely accepted French football terminology."},
                    {"role": "user", "content": current_xx['page-content']}
                ],
                temperature=0.7,
            )
            fr_data['page-content'] = response.choices[0].message.content.strip()
            
            # Clean up any code block formatting that might be returned
            if fr_data['page-content'].startswith("```") and fr_data['page-content'].endswith("```"):
                fr_data['page-content'] = fr_data['page-content'].split("```")[1].strip()
                
            log_with_time("Complete translation done")
        else:
            # Compare the previous and current content to identify changes
            if previous_xx.get('page-content') != current_xx.get('page-content'):
                log_with_time("Changes detected in xx.json, identifying specific changes")
                
                # Extract chunks from the current content
                current_content = current_xx.get('page-content', '')
                
                # Break the content into paragraphs or HTML elements for comparison
                chunks = []
                current_chunk = ""
                for line in current_content.splitlines():
                    current_chunk += line + "\n"
                    # Use closing tags as chunk boundaries
                    if "</div>" in line or "</section>" in line or "</p>" in line:
                        chunks.append(current_chunk.strip())
                        current_chunk = ""
                
                # Add any remaining content as a final chunk
                if current_chunk.strip():
                    chunks.append(current_chunk.strip())
                
                log_with_time(f"Split content into {len(chunks)} chunks")
                
                # Compare each chunk with the previous content to see if it changed
                prev_content = previous_xx.get('page-content', '')
                fr_content = fr_data.get('page-content', '')
                
                changes_made = False
                for i, chunk in enumerate(chunks):
                    # Skip very small chunks as they might be just HTML tags
                    if len(chunk) < 30:
                        continue
                        
                    # If this chunk exists in the previous content, skip it
                    if chunk in prev_content:
                        log_with_time(f"Chunk {i+1} unchanged, skipping")
                        continue
                    
                    # This chunk is new or modified, translate it
                    log_with_time(f"Translating chunk {i+1}")
                    translation_start = time.time()
                    
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[
                            {"role": "system", "content": "Translate the given HTML content from English to French. Keep all HTML tags and structure intact. Use widely accepted French football terminology."},
                            {"role": "user", "content": chunk}
                        ],
                        temperature=0.7,
                    )
                    
                    translated_chunk = response.choices[0].message.content.strip()
                    if translated_chunk.startswith("```") and translated_chunk.endswith("```"):
                        translated_chunk = translated_chunk.split("```")[1].strip()
                    
                    translation_end = time.time()
                    log_with_time(f"Chunk translated in {(translation_end - translation_start):.2f} seconds")
                    
                    # Try to find where to insert the translated chunk in the French content
                    # First, see if we can find this chunk's context in the current English content
                    chunk_start = current_content.find(chunk)
                    if chunk_start > 0:
                        # Get some context before the chunk
                        context_before = current_content[max(0, chunk_start-100):chunk_start]
                        # Look for the same context in the previous English content
                        prev_context_pos = prev_content.find(context_before)
                        
                        if prev_context_pos >= 0:
                            # If found, look for the same context in the French content
                            fr_context_pos = fr_content.find(context_before)
                            if fr_context_pos >= 0:
                                # Insert the translated chunk right after this context
                                insertion_point = fr_context_pos + len(context_before)
                                fr_data['page-content'] = fr_content[:insertion_point] + translated_chunk + fr_content[insertion_point:]
                                changes_made = True
                                continue
                    
                    # If we can't find a good insertion point, append to the end
                    log_with_time(f"Could not find exact insertion point for chunk {i+1}, appending to translation")
                    
                    # If we're dealing with the first chunk and no good match found, 
                    # it might be a total replacement
                    if i == 0 and not changes_made:
                        log_with_time("First chunk changed significantly, re-translating entire content")
                        response = client.chat.completions.create(
                            model="gpt-4o-mini",
                            messages=[
                                {"role": "system", "content": "Translate the given HTML content from English to French. Keep all HTML tags and structure intact. Use widely accepted French football terminology."},
                                {"role": "user", "content": current_content}
                            ],
                            temperature=0.7,
                        )
                        full_translated_content = response.choices[0].message.content.strip()
                        if full_translated_content.startswith("```") and full_translated_content.endswith("```"):
                            full_translated_content = full_translated_content.split("```")[1].strip()
                        
                        fr_data['page-content'] = full_translated_content
                        changes_made = True
                        break
                    
                    # Otherwise, just append the translated chunk
                    fr_data['page-content'] += "\n" + translated_chunk
                    changes_made = True
                
                if not changes_made:
                    log_with_time("Content changed but no specific chunks identified for translation")
                    # Fall back to translating the whole thing
                    response = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[
                            {"role": "system", "content": "Translate the given HTML content from English to French. Keep all HTML tags and structure intact. Use widely accepted French football terminology."},
                            {"role": "user", "content": current_content}
                        ],
                        temperature=0.7,
                    )
                    full_translated_content = response.choices[0].message.content.strip()
                    if full_translated_content.startswith("```") and full_translated_content.endswith("```"):
                        full_translated_content = full_translated_content.split("```")[1].strip()
                    
                    fr_data['page-content'] = full_translated_content
            else:
                log_with_time("No changes detected in the page-content")

        # Create the fr.json file
        log_with_time("Saving fr.json file")
        os.makedirs('locales', exist_ok=True)
        with open('locales/fr.json', 'w', encoding='utf-8') as json_file:
            json.dump(fr_data, json_file, ensure_ascii=False, indent=2)

        total_time = time.time() - start_time
        log_with_time(f"Translation complete. Total execution time: {total_time:.2f} seconds")
        EOL

        python translate_changes.py

    - name: Commit and push French translation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add locales/fr.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-translate changes in xx.json to French"
        git push

    - name: Checkout proguide repo
      uses: actions/checkout@v3
      with:
        repository: ohlitmybad/proguide
        path: proguide
        token: ${{ secrets.PAT }}

    - name: Commit and push proguide changes
      run: |
        cd proguide
        mkdir -p locales
        cp $GITHUB_WORKSPACE/locales/fr.json locales/
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add index.html locales/fr.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-translate changes in xx.json to French"
        git push
