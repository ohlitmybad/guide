name: Translate to French

on:
  push:
    branches: [ main, master ]
    paths:
      - 'locales/xx.json'

jobs:
  translate-to-french:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout guide repo
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai

    - name: Translate xx.json to French
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # Add your OpenAI API key to GitHub Secrets
      id: translate
      timeout-minutes: 6
      continue-on-error: true
      run: |
        cat > translate_to_french.py << 'EOL'
        import json
        import os
        from openai import OpenAI  # Import the new OpenAI client
        import re

        # Load the xx.json file
        with open('locales/xx.json', 'r', encoding='utf-8') as file:
            en_data = json.load(file)

        # Extract the page-content
        page_content = en_data.get('page-content', '')
        if not page_content:
            raise Exception("No 'page-content' found in xx.json")
            
        # Remove whitespace from the JSON content
        page_content = re.sub(r'\s+', ' ', page_content)
        page_content = page_content.strip()
        print("Removed whitespace from JSON content for more efficient translation")

        # Initialize OpenAI API
        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))  # Use the new client

        # Translate the content to French
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Use "gpt-4" or "gpt-3.5-turbo"
            messages=[
                {"role": "system", "content": "Translate the given JSON HTML content into French while keeping all JSON HTML tags and structure intact. Use widely accepted French football terminology, ensuring accuracy and natural flow. If uncertain about a term, verify its correct usage with online sources. Maintain authenticity and precision without altering the original meaning. Output only the translations of the following and that only, no extra text or markdown"},
                {"role": "user", "content": page_content}
            ],
            temperature=0.7,
        )

        # Extract the translated content
        translated_content = response.choices[0].message.content

        
        if translated_content.startswith("```json\n") and translated_content.endswith("\n```"):
            translated_content = translated_content[7:-3].strip()  # Remove ```json\n and \n```

        # Check if the translation is complete (ends with "</div> </section>")
        max_retries = 3
        current_try = 1
        
        while not (translated_content.strip().endswith("</div> </section>") or translated_content.strip().endswith("</div> </section>\"")) and current_try <= max_retries:
            print(f"Attempt {current_try}: Translation appears incomplete. Retrying...")
            
            # Retry the translation
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Translate the given JSON HTML content into French while keeping all JSON HTML tags and structure intact. Use widely accepted French football terminology, ensuring accuracy and natural flow. If uncertain about a term, verify its correct usage with online sources. Maintain authenticity and precision without altering the original meaning. Output only the translations of the following and that only, no extra text or markdown. IMPORTANT: Ensure you translate the COMPLETE content and end with '</div> </section>'"},
                    {"role": "user", "content": page_content}
                ],
                temperature=0.7,
            )
            
            translated_content = response.choices[0].message.content
            
            if translated_content.startswith("```json\n") and translated_content.endswith("\n```"):
                translated_content = translated_content[7:-3].strip()
                
            current_try += 1
            
        if not (translated_content.strip().endswith("</div> </section>") or translated_content.strip().endswith("</div> </section>\"")):
            print("Warning: Translation may still be incomplete after maximum retries.")

        # Create the fr.json file
        fr_data = {"common": {"nav": {"players": "Joueurs","pro": "Pro","teams": "Équipes"}},"meta": {"title": "DataMB | Guide","description": "Explication des outils, des statistiques et de la méthodologie utilisés par DataMB"},"search": {"placeholder": "Cherchez une équipe ou joueur..."},"page-content": translated_content}
        os.makedirs('locales', exist_ok=True)
        with open('locales/fr.json', 'w', encoding='utf-8') as json_file:
            json.dump(fr_data, json_file, ensure_ascii=False, indent=2)

        print("Translated content saved to locales/fr.json")
        EOL

        python translate_to_french.py

    - name: Retry translation if needed
      if: steps.translate.outcome == 'failure' || steps.translate.outcome == 'timed_out'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      timeout-minutes: 6
      run: |
        echo "First translation attempt failed or timed out. Retrying..."
        python translate_to_french.py

    - name: Commit and push French translation
      if: steps.translate.outcome == 'success' || success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add locales/fr.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-translate xx.json to French"
        git push

    - name: Clone and update proguide repository
      run: |
        # Create a temporary directory for the proguide repo
        mkdir -p /tmp/proguide
        cd /tmp/proguide
        
        # Clone the proguide repository
        git clone https://x-access-token:${{ secrets.PAT }}@github.com/datamb/proguide.git .
        
        # Create directories if they don't exist
        mkdir -p locales
        
        # Copy the fr.json file from the current workspace to proguide
        cp $GITHUB_WORKSPACE/locales/fr.json locales/
        
        # Commit and push changes to proguide
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add locales/fr.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-translate xx.json to French"
        git push
