name: Translate to French

on:
  push:
    branches: [ main, master ]
    paths:
      - 'locales/xx.json'

jobs:
  translate-to-french:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout guide repo
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 2  # Fetch the current and previous commit

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install openai

    - name: Translate modified parts of xx.json to French
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      id: translate
      run: |
        cat > translate_to_french.py << 'EOL'
        import json
        import os
        import time
        import sys
        import difflib
        import re
        import subprocess
        from openai import OpenAI

        # Function to log with timestamps
        def log_with_time(message):
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            print(f"[{timestamp}] {message}")
            sys.stdout.flush()  # Force output to be written immediately

        start_time = time.time()
        log_with_time("Starting translation process")

        # Get previous and current versions of xx.json
        log_with_time("Getting previous version of xx.json")
        try:
            # Get the hash of the previous commit
            prev_hash = subprocess.check_output(
                ['git', 'rev-parse', 'HEAD~1'],
                universal_newlines=True
            ).strip()
            
            # Get the previous version of xx.json
            prev_content = subprocess.check_output(
                ['git', 'show', f'{prev_hash}:locales/xx.json'],
                universal_newlines=True
            )
            prev_data = json.loads(prev_content)
            prev_page_content = prev_data.get('page-content', '')
            
            log_with_time("Successfully loaded previous version of xx.json")
        except Exception as e:
            log_with_time(f"Error getting previous version: {e}")
            log_with_time("Will translate the entire file as fallback")
            prev_page_content = ""

        # Load the current xx.json file
        log_with_time("Loading current xx.json file")
        with open('locales/xx.json', 'r', encoding='utf-8') as file:
            current_data = json.load(file)
            
        # Extract the current page-content
        log_with_time("Extracting current page-content")
        current_page_content = current_data.get('page-content', '')
        if not current_page_content:
            raise Exception("No 'page-content' found in xx.json")
            
        # Check if we need to translate existing fr.json
        fr_exists = os.path.exists('locales/fr.json')
        fr_data = {}
        if fr_exists:
            log_with_time("Found existing fr.json, loading it")
            with open('locales/fr.json', 'r', encoding='utf-8') as file:
                fr_data = json.load(file)
                
        # Initialize translation base (what we'll start with)
        translation_base = fr_data.get('page-content', '') if fr_exists else ''
            
        # Initialize OpenAI API
        log_with_time("Initializing OpenAI API client")
        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        # Function to find HTML blocks that have changed
        def find_changed_blocks(prev_html, current_html):
            log_with_time("Finding changed HTML blocks")
            
            if not prev_html:
                log_with_time("No previous content found, will translate everything")
                return [current_html]  # If no previous content, return the entire current content
                
            # Create a diff of the HTML content
            differ = difflib.Differ()
            diff = list(differ.compare(prev_html.splitlines(), current_html.splitlines()))
            
            # Find changed lines
            changed_line_indices = []
            for i, line in enumerate(diff):
                if line.startswith('+ ') or line.startswith('- '):
                    changed_line_indices.append(i)
            
            if not changed_line_indices:
                log_with_time("No changes detected, will translate everything")
                return [current_html]
            
            # Group consecutive changed lines
            change_groups = []
            current_group = [changed_line_indices[0]]
            
            for i in range(1, len(changed_line_indices)):
                if changed_line_indices[i] - changed_line_indices[i-1] <= 2:  # Allow 1 line gap
                    current_group.append(changed_line_indices[i])
                else:
                    change_groups.append(current_group)
                    current_group = [changed_line_indices[i]]
            
            if current_group:
                change_groups.append(current_group)
            
            # Extract changed blocks with their container elements
            changed_blocks = []
            for group in change_groups:
                # Get the line numbers in the original content
                start_idx = max(0, group[0] - 3)  # 3 lines before
                end_idx = min(len(diff), group[-1] + 4)  # 3 lines after
                
                # Extract the lines from current content
                content_lines = []
                for i in range(start_idx, end_idx):
                    if diff[i].startswith('+ ') or diff[i].startswith('  '):
                        content_lines.append(diff[i][2:])
                
                # Find the container HTML element for these changes
                block_content = '\n'.join(content_lines)
                
                # Find the innermost container element
                container_block = find_containing_element(current_html, block_content)
                if container_block:
                    changed_blocks.append(container_block)
                else:
                    # Fallback to just the changed block if can't find container
                    changed_blocks.append(block_content)
            
            log_with_time(f"Found {len(changed_blocks)} changed blocks with their containers")
            return changed_blocks
        
        # Function to find the innermost HTML container element that contains the changed content
        def find_containing_element(full_html, changed_content):
            # If the changed content is very small, expand it to make matching more reliable
            if len(changed_content) < 20:
                # Find position in full HTML
                pos = full_html.find(changed_content)
                if pos == -1:
                    # Try a fuzzy approach if exact match fails
                    for i in range(0, len(changed_content)):
                        partial = changed_content[i:]
                        if partial in full_html:
                            pos = full_html.find(partial) - i
                            break
                
                if pos != -1:
                    # Get more context around the change
                    start = max(0, pos - 200)
                    end = min(len(full_html), pos + len(changed_content) + 200)
                    expanded_content = full_html[start:end]
                    changed_content = expanded_content
            
            # Define container tags to look for
            container_tags = ['li', 'ul', 'ol', 'div', 'p', 'span', 'section', 'article', 'td', 'th']
            
            # First find if the changed content contains any of these tags fully
            for tag in container_tags:
                # Look for a complete tag element in the changed content
                pattern = f'<{tag}[^>]*>.*?</{tag}>'
                matches = re.finditer(pattern, changed_content, re.DOTALL)
                for match in matches:
                    # If the match covers most of the content, this is a good container
                    if (match.end() - match.start()) > len(changed_content) * 0.7:
                        return match.group(0)
            
            # If no good container in the changed content, find the smallest container in the full HTML
            pos = full_html.find(changed_content)
            if pos != -1:
                # Look backward for opening tags
                opening_tags = []
                for i in range(pos, 0, -1):
                    if full_html[i] == '<' and not full_html[i:i+2] == '</':
                        tag_end = full_html.find('>', i)
                        if tag_end != -1:
                            tag_name_match = re.match(r'<([a-z][a-z0-9]*)', full_html[i:tag_end])
                            if tag_name_match and tag_name_match.group(1) in container_tags:
                                opening_tags.append((i, tag_name_match.group(1)))
                
                # Look for the matching closing tag for each opening tag
                for opening_pos, tag_name in opening_tags:
                    # Find the matching closing tag after the changed content
                    closing_tag = f'</{tag_name}>'
                    closing_pos = full_html.find(closing_tag, pos + len(changed_content))
                    
                    if closing_pos != -1:
                        # Check if this container is not too large (to keep it specific to the changed part)
                        container_size = closing_pos + len(closing_tag) - opening_pos
                        if container_size < 2000:  # Reasonable size limit for a container
                            return full_html[opening_pos:closing_pos + len(closing_tag)]
            
            # Fallback: just return the changed content if no good container found
            return changed_content

        # Find the blocks that need to be translated
        blocks_to_translate = find_changed_blocks(prev_page_content, current_page_content)
        
        # Function to translate a block
        def translate_block(block, block_index, total_blocks):
            log_with_time(f"Translating block {block_index+1}/{total_blocks} ({len(block)} characters)")
            
            translation_start = time.time()
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Translate the given HTML content into French while keeping all HTML tags and structure intact. Use widely accepted French football terminology. Maintain authenticity and precision without altering the original meaning. Output only the translations without any additional text or markdown."},
                    {"role": "user", "content": block}
                ],
                temperature=0.7,
            )
            translation_end = time.time()
            
            log_with_time(f"Block {block_index+1} translated in {(translation_end - translation_start):.2f} seconds")
            
            translated_block = response.choices[0].message.content
            if translated_block.startswith("```") and translated_block.endswith("```"):
                translated_block = re.sub(r'^```.*\n', '', translated_block)
                translated_block = re.sub(r'\n```$', '', translated_block)
                
            return translated_block
        
        # Update the fr.json file
        if len(blocks_to_translate) == 1 and blocks_to_translate[0] == current_page_content:
            # If we're translating the entire content
            log_with_time("Translating the entire page content")
            if len(current_page_content) > 6000:
                # Process large content in chunks as in the original script
                # (Code for chunking large content would go here, similar to the original)
                # ...
                log_with_time("Content is large, processing in batches")
                
                # Split content into manageable chunks based on HTML structure
                chunks = []
                current_position = 0
                
                # Function to find a good split point
                def find_split_point(text, start_pos, chunk_size=6000):
                    end_pos = min(start_pos + chunk_size, len(text))
                    if end_pos >= len(text):
                        return len(text)
                    
                    # Look for end of section/div tags as good split points
                    for marker in ['</section>', '</div>']:
                        marker_pos = text.rfind(marker, start_pos, end_pos)
                        if marker_pos != -1:
                            return marker_pos + len(marker)
                    
                    # If no good split point found, look for end of paragraph
                    paragraph_end = text.rfind('</p>', start_pos, end_pos)
                    if paragraph_end != -1:
                        return paragraph_end + 4
                    
                    # Fallback to sentence end
                    for punct in ['. ', '! ', '? ']:
                        punct_pos = text.rfind(punct, start_pos, end_pos)
                        if punct_pos != -1:
                            return punct_pos + 2
                    
                    # Last resort: just split at chunk_size
                    return end_pos
                
                # Split content into chunks
                while current_position < len(current_page_content):
                    split_point = find_split_point(current_page_content, current_position)
                    chunk = current_page_content[current_position:split_point]
                    chunks.append(chunk)
                    current_position = split_point
                
                log_with_time(f"Split content into {len(chunks)} chunks")
                
                # Translate each chunk separately
                translated_chunks = []
                for i, chunk in enumerate(chunks):
                    translated_chunk = translate_block(chunk, i, len(chunks))
                    translated_chunks.append(translated_chunk)
                
                # Combine all translated chunks
                log_with_time("Combining all translated chunks")
                translated_content = "".join(translated_chunks)
            else:
                # Translate the whole content at once
                translated_content = translate_block(current_page_content, 0, 1)
        else:
            # If we're translating specific blocks
            log_with_time(f"Translating {len(blocks_to_translate)} modified container blocks")
            
            # Start with the current translation if available
            if translation_base:
                log_with_time("Using existing French translation as base")
                translated_content = translation_base
            else:
                # If no existing translation, translate everything
                log_with_time("No existing translation found, translating everything")
                translated_content = translate_block(current_page_content, 0, 1)
                
            # Translate each modified block and update the content
            for i, block in enumerate(blocks_to_translate):
                if translation_base:  # Only attempt to replace if we have a base translation
                    translated_block = translate_block(block, i, len(blocks_to_translate))
                    
                    # Find where this block should go in the original content
                    block_start = current_page_content.find(block)
                    if block_start != -1:
                        log_with_time(f"Found position of container block {i+1} in original content")
                        
                        # Find the same container in the translated content
                        # First extract the HTML structure (tags only) to make matching more reliable
                        block_structure = re.sub(r'>([^<]+)<', '><', block)
                        translated_structure = re.sub(r'>([^<]+)<', '><', translation_base)
                        
                        structure_pos = translated_structure.find(block_structure)
                        if structure_pos != -1:
                            # Found matching structure in translated content
                            log_with_time(f"Found matching HTML structure in translated content for block {i+1}")
                            
                            # Extract the matching section from the translated content
                            translated_match_start = translated_structure.find(block_structure)
                            translated_match_end = translated_match_start + len(block_structure) 
                            
                            # Replace just this container with the new translation
                            log_with_time(f"Replacing container in translated content for block {i+1}")
                            translated_content = translation_base[:translated_match_start] + translated_block + translation_base[translated_match_end:]
                            continue
                        
                        # If structure matching fails, try to find it based on surrounding content
                        # Look for unique content before and after the block
                        context_before = current_page_content[max(0, block_start-100):block_start]
                        context_after = current_page_content[block_start+len(block):min(len(current_page_content), block_start+len(block)+100)]
                        
                        # Extract unique HTML tags or patterns 
                        before_tag = re.search(r'<[^>]+>[^<]*$', context_before)
                        after_tag = re.search(r'^[^>]*<[^>]+>', context_after)
                        
                        if before_tag and after_tag:
                            before_pattern = before_tag.group(0)
                            after_pattern = after_tag.group(0)
                            
                            # Find these patterns in the translated content
                            before_pos = translation_base.find(before_pattern)
                            after_pos = translation_base.find(after_pattern, before_pos + 1 if before_pos != -1 else 0)
                            
                            if before_pos != -1 and after_pos != -1:
                                log_with_time(f"Found surrounding content markers for block {i+1}")
                                # Replace just the content between these markers
                                translated_content = translation_base[:before_pos + len(before_pattern)] + translated_block + translation_base[after_pos:]
                                continue
                        
                        # Last resort: Use a ratio approach but only for this specific container
                        log_with_time(f"Using fallback approach for block {i+1}")
                        ratio = len(translation_base) / len(current_page_content)
                        approx_start = int(block_start * ratio)
                        approx_length = int(len(block) * ratio)
                        
                        # Try to find HTML tag boundaries around this position
                        # Look for the closest tag boundaries
                        tag_start = max(0, approx_start - 50)
                        tag_end = min(len(translation_base), approx_start + approx_length + 50)
                        
                        # Find opening and closing tags
                        opening_tag_pos = -1
                        closing_tag_pos = -1
                        
                        # Extract the first part of the block's opening tag
                        block_opening_match = re.match(r'<([a-z][a-z0-9]*)[^>]*>', block)
                        if block_opening_match:
                            # Look for a matching tag in the translation
                            tag_name = block_opening_match.group(1)
                            opening_pattern = f'<{tag_name}[^>]*>'
                            closing_pattern = f'</{tag_name}>'
                            
                            # Find a matching opening tag near the estimated position
                            opening_tags = list(re.finditer(opening_pattern, translation_base[tag_start:tag_end]))
                            if opening_tags:
                                # Take the middle match if multiple exist
                                middle_match = opening_tags[len(opening_tags)//2]
                                opening_tag_pos = tag_start + middle_match.start()
                                
                                # Find the corresponding closing tag
                                closing_pos = translation_base.find(closing_pattern, opening_tag_pos)
                                if closing_pos != -1:
                                    closing_tag_pos = closing_pos + len(closing_pattern)
                        
                        if opening_tag_pos != -1 and closing_tag_pos != -1:
                            log_with_time(f"Found tag boundaries for block {i+1}")
                            translated_content = translation_base[:opening_tag_pos] + translated_block + translation_base[closing_tag_pos:]
                        else:
                            # Absolute last resort - direct replacement around estimated position
                            log_with_time(f"Using direct replacement for block {i+1}")
                            safe_start = max(0, approx_start)
                            safe_end = min(len(translation_base), approx_start + approx_length)
                            translated_content = translation_base[:safe_start] + translated_block + translation_base[safe_end:]

        # Create the fr.json file
        log_with_time("Creating fr.json file")
        fr_data = {
            "common": {"nav": {"players": "Joueurs","pro": "Pro","teams": "Équipes"}},
            "meta": {"title": "DataMB | Guide","description": "Explication des outils, des statistiques et de la méthodologie utilisés par DataMB"},
            "search": {"placeholder": "Cherchez une équipe ou joueur..."},
            "page-content": translated_content
        }
        
        os.makedirs('locales', exist_ok=True)
        with open('locales/fr.json', 'w', encoding='utf-8') as json_file:
            json.dump(fr_data, json_file, ensure_ascii=False, indent=2)

        total_time = time.time() - start_time
        log_with_time(f"Translated content saved to locales/fr.json. Total execution time: {total_time:.2f} seconds")
        EOL

        python translate_to_french.py

    - name: Commit and push French translation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add locales/fr.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-translate xx.json to French"
        git push

    - name: Checkout proguide repo
      uses: actions/checkout@v3
      with:
        repository: ohlitmybad/proguide
        path: proguide
        token: ${{ secrets.PAT }}

    - name: Commit and push proguide changes
      run: |
        cd proguide
        mkdir -p locales
        cp $GITHUB_WORKSPACE/locales/fr.json locales/
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add index.html locales/fr.json
        git diff --quiet && git diff --staged --quiet || git commit -m "Auto-translate xx.json to French"
        git push
